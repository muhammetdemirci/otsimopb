// Code generated by protoc-gen-gogo.
// source: dashboard.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChartType int32

const (
	LINE     ChartType = 0
	BAR      ChartType = 1
	PIE      ChartType = 2
	SCATTER  ChartType = 3
	BUBLE    ChartType = 4
	RADAR    ChartType = 5
	GEO      ChartType = 6
	TIMELINE ChartType = 7
)

var ChartType_name = map[int32]string{
	0: "LINE",
	1: "BAR",
	2: "PIE",
	3: "SCATTER",
	4: "BUBLE",
	5: "RADAR",
	6: "GEO",
	7: "TIMELINE",
}
var ChartType_value = map[string]int32{
	"LINE":     0,
	"BAR":      1,
	"PIE":      2,
	"SCATTER":  3,
	"BUBLE":    4,
	"RADAR":    5,
	"GEO":      6,
	"TIMELINE": 7,
}

func (x ChartType) String() string {
	return proto.EnumName(ChartType_name, int32(x))
}
func (ChartType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{0} }

type Dashboard struct {
	// ProfileId
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// ChildId
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// Data
	Data *DataSet `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	// Created At
	CreatedAt int64 `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Dashboard) Reset()                    { *m = Dashboard{} }
func (m *Dashboard) String() string            { return proto.CompactTextString(m) }
func (*Dashboard) ProtoMessage()               {}
func (*Dashboard) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{0} }

type DashboardGetRequest struct {
	ProfileId  string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ChildId    string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	AppVersion string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
}

func (m *DashboardGetRequest) Reset()                    { *m = DashboardGetRequest{} }
func (m *DashboardGetRequest) String() string            { return proto.CompactTextString(m) }
func (*DashboardGetRequest) ProtoMessage()               {}
func (*DashboardGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{1} }

func init() {
	proto.RegisterType((*Dashboard)(nil), "apipb.Dashboard")
	proto.RegisterType((*DashboardGetRequest)(nil), "apipb.DashboardGetRequest")
	proto.RegisterEnum("apipb.ChartType", ChartType_name, ChartType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for DashboardService service

type DashboardServiceClient interface {
	Get(ctx context.Context, in *DashboardGetRequest, opts ...grpc.CallOption) (*Dashboard, error)
}

type dashboardServiceClient struct {
	cc *grpc.ClientConn
}

func NewDashboardServiceClient(cc *grpc.ClientConn) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) Get(ctx context.Context, in *DashboardGetRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := grpc.Invoke(ctx, "/apipb.DashboardService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DashboardService service

type DashboardServiceServer interface {
	Get(context.Context, *DashboardGetRequest) (*Dashboard, error)
}

func RegisterDashboardServiceServer(s *grpc.Server, srv DashboardServiceServer) {
	s.RegisterService(&_DashboardService_serviceDesc, srv)
}

func _DashboardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DashboardGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DashboardServiceServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _DashboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DashboardService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *Dashboard) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Dashboard) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ProfileId)))
		i += copy(data[i:], m.ProfileId)
	}
	if len(m.ChildId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ChildId)))
		i += copy(data[i:], m.ChildId)
	}
	if m.Data != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CreatedAt != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintDashboard(data, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *DashboardGetRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DashboardGetRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ProfileId)))
		i += copy(data[i:], m.ProfileId)
	}
	if len(m.ChildId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ChildId)))
		i += copy(data[i:], m.ChildId)
	}
	if len(m.AppVersion) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.AppVersion)))
		i += copy(data[i:], m.AppVersion)
	}
	return i, nil
}

func encodeFixed64Dashboard(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dashboard(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDashboard(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Dashboard) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovDashboard(uint64(m.CreatedAt))
	}
	return n
}

func (m *DashboardGetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}

func sovDashboard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDashboard(x uint64) (n int) {
	return sovDashboard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dashboard) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dashboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dashboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataSet{}
			}
			if err := m.Data.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashboardGetRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashboardGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashboardGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDashboard(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDashboard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDashboard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDashboard(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDashboard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDashboard   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorDashboard = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x91, 0xcd, 0xce, 0x9a, 0x40,
	0x14, 0x86, 0x45, 0x50, 0xe0, 0xd8, 0x9f, 0xc9, 0x74, 0x63, 0x49, 0x6a, 0x1b, 0x56, 0x4d, 0x93,
	0x62, 0xa2, 0x57, 0x00, 0x4a, 0x0c, 0x89, 0xfd, 0x09, 0xd2, 0x2e, 0xba, 0x31, 0x03, 0x8c, 0x32,
	0x89, 0x76, 0xa6, 0x30, 0x9a, 0xf4, 0x0e, 0xba, 0xec, 0x65, 0xb9, 0xf4, 0x12, 0xfa, 0x73, 0x23,
	0x1d, 0x46, 0xeb, 0xe2, 0xfb, 0x96, 0xdf, 0xe2, 0x24, 0xe7, 0x3c, 0xef, 0xcb, 0xc9, 0x7b, 0x18,
	0x78, 0x5a, 0x92, 0xa6, 0xca, 0x39, 0xa9, 0xcb, 0x40, 0xd4, 0x5c, 0x72, 0xdc, 0x23, 0x82, 0x89,
	0xdc, 0x7b, 0x5c, 0x12, 0x49, 0x1a, 0x2a, 0x2f, 0xd4, 0x7b, 0xbb, 0x65, 0xb2, 0x3a, 0xe4, 0x41,
	0xc1, 0xf7, 0xe3, 0x2d, 0xdf, 0xf2, 0xb1, 0xc6, 0xf9, 0x61, 0xa3, 0x27, 0x3d, 0xe8, 0xee, 0x62,
	0xf7, 0x7f, 0x18, 0xe0, 0xce, 0xff, 0x2f, 0xc6, 0x2f, 0x00, 0x14, 0xde, 0xb0, 0x1d, 0x5d, 0xb3,
	0x72, 0x68, 0xbc, 0x32, 0x5e, 0xbb, 0xa9, 0x7b, 0x25, 0x49, 0x89, 0x9f, 0x83, 0x53, 0x54, 0x6c,
	0x57, 0xb6, 0x62, 0x57, 0x8b, 0xb6, 0x9e, 0x95, 0xe4, 0x83, 0xd5, 0xe6, 0x18, 0x9a, 0x0a, 0x0f,
	0x26, 0x4f, 0x02, 0x9d, 0x2d, 0x98, 0x2b, 0xb4, 0xa2, 0x32, 0xd5, 0x5a, 0xbb, 0xbd, 0xa8, 0x29,
	0x91, 0xb4, 0x5c, 0x13, 0x39, 0xb4, 0x94, 0xd3, 0x4c, 0xdd, 0x2b, 0x09, 0xa5, 0x2f, 0xe0, 0xd9,
	0x2d, 0xc9, 0x42, 0x7d, 0x44, 0xbf, 0x1d, 0x68, 0x23, 0x1f, 0x90, 0xe9, 0x25, 0x0c, 0x88, 0x10,
	0xeb, 0x23, 0xad, 0x1b, 0xc6, 0xbf, 0xea, 0x68, 0x6e, 0x0a, 0x0a, 0x7d, 0xbe, 0x90, 0x37, 0x04,
	0xdc, 0x59, 0x45, 0x6a, 0x99, 0x7d, 0x17, 0x14, 0x3b, 0x60, 0x2d, 0x93, 0xf7, 0x31, 0xea, 0x60,
	0x1b, 0xcc, 0x28, 0x4c, 0x91, 0xd1, 0x36, 0x1f, 0x93, 0x18, 0x75, 0xf1, 0x00, 0xec, 0xd5, 0x2c,
	0xcc, 0xb2, 0x38, 0x45, 0x26, 0x76, 0xa1, 0x17, 0x7d, 0x8a, 0x96, 0x31, 0xb2, 0xda, 0x36, 0x0d,
	0xe7, 0xca, 0xdb, 0x6b, 0xbd, 0x8b, 0xf8, 0x03, 0xea, 0xe3, 0x47, 0xe0, 0x64, 0xc9, 0xbb, 0x58,
	0xef, 0xb2, 0x27, 0x0b, 0x40, 0xb7, 0xa3, 0x56, 0xb4, 0x3e, 0xb2, 0x82, 0xe2, 0xa9, 0xb2, 0x52,
	0x89, 0xbd, 0xdb, 0x4f, 0xba, 0x77, 0xb4, 0x87, 0xee, 0x6a, 0x91, 0x7f, 0xfa, 0x3d, 0xea, 0x9c,
	0x55, 0x9d, 0xfe, 0x8c, 0x8c, 0xb3, 0xaa, 0x5f, 0xaa, 0x7e, 0xfe, 0x1d, 0x75, 0xbe, 0x38, 0x5c,
	0x36, 0x6c, 0xcf, 0x45, 0x9e, 0xf7, 0xf5, 0x9b, 0x4e, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3f,
	0xcb, 0x92, 0xc9, 0x2b, 0x02, 0x00, 0x00,
}
